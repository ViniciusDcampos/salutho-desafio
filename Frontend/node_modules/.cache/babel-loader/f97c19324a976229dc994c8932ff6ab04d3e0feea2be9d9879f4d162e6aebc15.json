{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\viniv\\\\salutho\\\\src\\\\App.js\";\nimport { useState } from 'react';\nimport Banner from './componentes/Banner';\nimport Formulario from './componentes/Formulario';\nimport ResultadoDivisao from './componentes/ResultadoDivisao';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  // Função que simula o cálculo ou a chamada à API Django\n  const calcular = (x, y) => {\n    console.log(`Calculando com X: ${x} e Y: ${y}`);\n    // Aqui você pode implementar a lógica de cálculo ou chamada à API\n    // Por exemplo, para um teste, você pode definir um resultado fictício:\n    const resultadoCalculado = parseInt(x) * parseInt(y); // Exemplo simples de multiplicação\n    setResultado(resultadoCalculado);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Banner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Formulario, {\n      calcular: calcular\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResultadoDivisao, {\n      resultado: resultado,\n      x: valorX,\n      y: valorY\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Banner","Formulario","ResultadoDivisao","jsxDEV","_jsxDEV","App","calcular","x","y","console","log","resultadoCalculado","parseInt","setResultado","className","children","fileName","_jsxFileName","lineNumber","columnNumber","resultado","valorX","valorY","_c","$RefreshReg$"],"sources":["C:/Users/viniv/salutho/src/App.js"],"sourcesContent":["import { useState } from 'react';\nimport Banner from './componentes/Banner';\nimport Formulario from './componentes/Formulario';\nimport ResultadoDivisao from './componentes/ResultadoDivisao';\n\nfunction App() {\n\n\n  // Função que simula o cálculo ou a chamada à API Django\n  const calcular = (x, y) => {\n      console.log(`Calculando com X: ${x} e Y: ${y}`);\n      // Aqui você pode implementar a lógica de cálculo ou chamada à API\n      // Por exemplo, para um teste, você pode definir um resultado fictício:\n      const resultadoCalculado = parseInt(x) * parseInt(y); // Exemplo simples de multiplicação\n      setResultado(resultadoCalculado);\n  };\n\n  return (\n    <div className=\"App\">\n      <Banner />\n      <Formulario calcular={calcular} />\n      <ResultadoDivisao resultado={resultado} x={valorX} y={valorY} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,gBAAgB,MAAM,gCAAgC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9D,SAASC,GAAGA,CAAA,EAAG;EAGb;EACA,MAAMC,QAAQ,GAAGA,CAACC,CAAC,EAAEC,CAAC,KAAK;IACvBC,OAAO,CAACC,GAAG,CAAC,qBAAqBH,CAAC,SAASC,CAAC,EAAE,CAAC;IAC/C;IACA;IACA,MAAMG,kBAAkB,GAAGC,QAAQ,CAACL,CAAC,CAAC,GAAGK,QAAQ,CAACJ,CAAC,CAAC,CAAC,CAAC;IACtDK,YAAY,CAACF,kBAAkB,CAAC;EACpC,CAAC;EAED,oBACEP,OAAA;IAAKU,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBX,OAAA,CAACJ,MAAM;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVf,OAAA,CAACH,UAAU;MAACK,QAAQ,EAAEA;IAAS;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClCf,OAAA,CAACF,gBAAgB;MAACkB,SAAS,EAAEA,SAAU;MAACb,CAAC,EAAEc,MAAO;MAACb,CAAC,EAAEc;IAAO;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7D,CAAC;AAEV;AAACI,EAAA,GAnBQlB,GAAG;AAqBZ,eAAeA,GAAG;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}